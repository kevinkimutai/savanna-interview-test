// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order-details.sql

package queries

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  order_id,product_id,quantity
) VALUES (
  $1, $2, $3
)
RETURNING order_item_id, order_id, product_id, quantity, created_at
`

type CreateOrderItemParams struct {
	OrderID   string
	ProductID int64
	Quantity  int32
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE order_item_id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, orderItemID int64) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, orderItemID)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT order_item_id, order_id, product_id, quantity, created_at FROM order_items
WHERE order_item_id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, orderItemID int64) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItem, orderItemID)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT order_item_id, order_id, product_id, quantity, created_at FROM order_items
ORDER BY created_at DESC
`

func (q *Queries) ListOrderItems(ctx context.Context) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
