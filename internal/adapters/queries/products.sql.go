// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
WHERE (name ILIKE '%' || $1 || '%' OR $1 IS NULL)
  AND (price >= $2 OR $2 IS NULL)
  AND (price <= $3 OR $3 IS NULL)
`

type CountProductsParams struct {
	Column1 pgtype.Text
	Price   pgtype.Numeric
	Price_2 pgtype.Numeric
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts, arg.Column1, arg.Price, arg.Price_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,price,image_url
) VALUES (
  $1, $2 , $3
)
RETURNING product_id, name, price, image_url, created_at
`

type CreateProductParams struct {
	Name     string
	Price    pgtype.Numeric
	ImageUrl string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Price, arg.ImageUrl)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, name, price, image_url, created_at FROM products
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productID int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, name, price, image_url, created_at FROM products
WHERE (name ILIKE '%' || $1 || '%' OR $1 IS NULL)
  AND (price >= $2 OR $2 IS NULL)
  AND (price <= $3 OR $3 IS NULL)
ORDER BY created_at
LIMIT $4 OFFSET $5
`

type ListProductsParams struct {
	Column1 pgtype.Text
	Price   pgtype.Numeric
	Price_2 pgtype.Numeric
	Limit   int32
	Offset  int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.Column1,
		arg.Price,
		arg.Price_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.ImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
  set name = $2,
  price = $3,
  image_url = $4
WHERE product_id = $1
RETURNING product_id, name, price, image_url, created_at
`

type UpdateProductParams struct {
	ProductID int64
	Name      string
	Price     pgtype.Numeric
	ImageUrl  string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductID,
		arg.Name,
		arg.Price,
		arg.ImageUrl,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}
